'use client';
import { useEffect, useState, useMemo } from 'react';
import Swal from 'sweetalert2';
import bcrypt from 'bcryptjs';

type Teacher = {
  Username: string;
  Prefix: string;
  F_name: string;
  L_name: string;
  Faclty: string;
  Phone: string;
  Email: string;
  Password: string;
};

const emptyTeacher: Teacher = {
  Username: '',
  Prefix: '',
  F_name: '',
  L_name: '',
  Faclty: '',
  Phone: '',
  Email: '',
  Password: '',
};

const faculties = [
  '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•',
  '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏µ‡∏¨‡∏≤',
  '‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ä‡∏∏‡∏°‡∏ä‡∏ô',
  '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
  '‡∏Ñ‡∏ì‡∏∞‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
  '‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏¥‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
  '‡∏Ñ‡∏ì‡∏∞‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ä‡∏µ‡∏ß‡∏†‡∏≤‡∏û',
  '‡∏Ñ‡∏ì‡∏∞‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
  '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏´‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£',
  '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏´‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
  '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤',
  '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå'
];

export default function TeacherPage() {
  const [teachers, setTeachers] = useState<Teacher[]>([]);
  const [form, setForm] = useState<Teacher>(emptyTeacher);
  const [editingUsername, setEditingUsername] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [showForm, setShowForm] = useState<boolean>(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [positionFilter, setPositionFilter] = useState('');
  const [sortBy, setSortBy] = useState<'name' | 'position' | 'username'>('name');

  const fetchTeachers = async () => {
    setLoading(true);
    try {
      const res = await fetch('/api/teacher');
      if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
      const data = await res.json();
      setTeachers(data);
    } catch (err: any) {
      console.error('Error fetching teacher:', err);
      Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', err.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÑ‡∏î‡πâ', 'error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTeachers();
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const validateForm = (): string[] => {
    const errors: string[] = [];
    if (!form.Username.trim()) errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Username');
    if (!editingUsername && !form.Password.trim()) errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Password');
    if (!form.F_name.trim()) errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠');
    if (!form.L_name.trim()) errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•');
    if (form.Email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.Email)) {
      errors.push('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    if (form.Phone && !/^[0-9-+() ]+$/.test(form.Phone)) {
      errors.push('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    return errors;
  };

  const handleSubmit = async () => {
    const validationErrors = validateForm();
    if (validationErrors.length > 0) {
      Swal.fire({
        icon: 'error',
        title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        html: validationErrors.join('<br />'),
      });
      return;
    }

    try {
      const method = editingUsername ? 'PUT' : 'POST';
      const url = editingUsername
        ? `/api/teacher/${editingUsername}`
        : '/api/teacher';

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç state ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const payload = { ...form };

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (payload.Password && payload.Password.trim() !== '') {
        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        const salt = await bcrypt.genSalt(10);
        payload.Password = await bcrypt.hash(payload.Password, salt);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
        // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        if (editingUsername) {
          delete (payload as Partial<Teacher>).Password;
        }
      }

      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${res.status}: ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      }

      await fetchTeachers();
      resetForm();
      Swal.fire({
        icon: 'success',
        title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        text: editingUsername ? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        timer: 1500,
        showConfirmButton: false,
      });
    } catch (error: any) {
      console.error('Submit error:', error);
      Swal.fire({
        icon: 'error',
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: error.message,
      });
    }
  };

  const handleEdit = (teacher: Teacher) => {
    setForm({ ...teacher, Password: '' }); // Don't show password when editing
    setEditingUsername(teacher.Username);
    setShowForm(true);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleDelete = async (username: string) => {
    Swal.fire({
      title: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      text: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå "${username}"? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢!',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const res = await fetch(`/api/teacher/${username}`, { method: 'DELETE' });
          if (!res.ok) {
            const errorData = await res.json().catch(() => ({}));
            throw new Error(errorData.message || `HTTP ${res.status}: ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
          }
          await fetchTeachers();
          Swal.fire(
            '‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß!',
            `‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå "${username}" ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
            'success'
          );
        } catch (error: any) {
          console.error('Delete error:', error);
          Swal.fire({
            icon: 'error',
            title: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
            text: error.message,
            footer: '‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
          });
        }
      }
    });
  };

  const resetForm = () => {
    setForm(emptyTeacher);
    setEditingUsername(null);
    setShowForm(false);
  };

  // Get unique positions for filter (using Prefix)
  const uniquePositions = useMemo(() => {
    const positions = teachers.map(teacher => teacher.Prefix).filter(Boolean);
    return [...new Set(positions)].sort();
  }, [teachers]);

  // Filtered and sorted data
  const filteredAndSortedTeachers = useMemo(() => {
    let filtered = teachers.filter(teacher => {
      const matchesSearch = !searchTerm || 
        teacher.Username.toLowerCase().includes(searchTerm.toLowerCase()) ||
        teacher.F_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        teacher.L_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        teacher.Email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        teacher.Phone.includes(searchTerm);
      
      const matchesPosition = !positionFilter || teacher.Prefix === positionFilter;
      
      return matchesSearch && matchesPosition;
    });

    // Sort the filtered results
    return filtered.sort((a, b) => {
      switch (sortBy) {
        case 'name':
          return `${a.F_name} ${a.L_name}`.localeCompare(`${b.F_name} ${b.L_name}`);
        case 'position':
          return (a.Prefix || '').localeCompare(b.Prefix || '');
        case 'username':
          return a.Username.localeCompare(b.Username);
        default:
          return 0;
      }
    });
  }, [teachers, searchTerm, positionFilter, sortBy]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      <main className="p-4 max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6 border-l-4 border-gradient-to-r from-blue-500 to-indigo-600">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-2">
                üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
              </h1>
              <p className="text-blue-600">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
            </div>
            <div className="text-right">
              <div className="text-2xl font-bold text-blue-600">{teachers.length}</div>
              <div className="text-sm text-blue-500">‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
            </div>
          </div>
        </div>

        {/* Controls */}
        <div className="bg-white rounded-xl shadow-lg p-4 mb-6">
          <div className="flex flex-wrap gap-4 items-center justify-between">
            <button
              onClick={() => {
                resetForm();
                setShowForm(!showForm);
              }}
              className={`px-6 py-2 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 ${
                showForm
                  ? 'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white shadow-lg'
                  : 'bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white shadow-lg'
              }`}
            >
              {showForm ? '‚ùå ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°' : '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà'}
            </button>

            <div className="flex flex-wrap gap-3 items-center">
              <div className="relative">
                <input
                  type="text"
                  placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-4 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              
              <select
                value={positionFilter}
                onChange={(e) => setPositionFilter(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                {uniquePositions.map(position => (
                  <option key={position} value={position}>{position}</option>
                ))}
              </select>

              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value as 'name' | 'position' | 'username')}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="name">‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠</option>
                <option value="position">‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</option>
                <option value="username">‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Username</option>
              </select>
            </div>
          </div>
        </div>

        {/* Form */}
        {showForm && (
          <div className="bg-white p-6 rounded-xl shadow-lg mb-6 border-l-4 border-blue-400">
            <h2 className="text-xl font-semibold text-blue-800 mb-6">
              {editingUsername ? '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' : '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà'}
            </h2>

            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div>
                  <label className="block text-blue-700 font-medium mb-2">Username *</label>
                  <input
                    name="Username"
                    placeholder="Username"
                    value={form.Username}
                    onChange={handleChange}
                    disabled={!!editingUsername}
                    className={`w-full border border-gray-300 p-3 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all ${
                      editingUsername ? 'bg-gray-100 cursor-not-allowed' : ''
                    }`}
                  />
                  {editingUsername && (
                    <p className="text-xs text-gray-500 mt-1">Username ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ</p>
                  )}
                </div>

                <div>
                  <label className="block text-blue-700 font-medium mb-2">
                    Password {!editingUsername && '*'}
                  </label>
                  <input
                    name="Password"
                    type="password"
                    placeholder={editingUsername ? "‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô" : "Password"}
                    value={form.Password}
                    onChange={handleChange}
                    className="w-full border border-gray-300 p-3 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                  />
                </div>

                <div>
                  <label className="block text-blue-700 font-medium mb-2">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</label>
                  <input
                    name="Prefix"
                    placeholder="‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡∏£., ‡∏ú‡∏®.)"
                    value={form.Prefix}
                    onChange={handleChange}
                    className="w-full border border-gray-300 p-3 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                  />
                </div>

                <div>
                  <label className="block text-blue-700 font-medium mb-2">‡∏ä‡∏∑‡πà‡∏≠ *</label>
                  <input
                    name="F_name"
                    placeholder="‡∏ä‡∏∑‡πà‡∏≠"
                    value={form.F_name}
                    onChange={handleChange}
                    className="w-full border border-gray-300 p-3 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                  />
                </div>

                <div>
                  <label className="block text-blue-700 font-medium mb-2">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</label>
                  <input
                    name="L_name"
                    placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                    value={form.L_name}
                    onChange={handleChange}
                    className="w-full border border-gray-300 p-3 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                  />
                </div>

                <div>
                  <label className="block text-blue-700 font-medium mb-2">‡∏Ñ‡∏ì‡∏∞</label>
                  <select
                    name="Faclty"
                    value={form.Faclty}
                    onChange={handleChange}
                    className="w-full border border-gray-300 p-3 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                  >
                    <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞ --</option>
                    {faculties.map((faculty) => (
                      <option key={faculty} value={faculty}>
                        {faculty}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-blue-700 font-medium mb-2">Email</label>
                  <input
                    name="Email"
                    placeholder="example@email.com"
                    type="email"
                    value={form.Email}
                    onChange={handleChange}
                    className="w-full border border-gray-300 p-3 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                  />
                </div>

                <div>
                  <label className="block text-blue-700 font-medium mb-2">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
                  <input
                    name="Phone"
                    placeholder="0xx-xxx-xxxx"
                    value={form.Phone}
                    onChange={handleChange}
                    className="w-full border border-gray-300 p-3 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all"
                  />
                </div>
              </div>

              <div className="flex gap-3 pt-3">
                <button
                  onClick={handleSubmit}
                  className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 shadow-lg"
                >
                  {editingUsername ? 'üíæ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' : '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå'}
                </button>
                {editingUsername && (
                  <button
                    onClick={resetForm}
                    className="bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white py-3 px-6 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 shadow-lg"
                  >
                    ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Table */}
        {loading ? (
          <div className="bg-white p-12 rounded-xl shadow-lg text-center">
            <div className="animate-spin text-6xl mb-4">‚è≥</div>
            <p className="text-blue-600 text-lg">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
          </div>
        ) : (
          <div className="bg-white rounded-xl shadow-lg overflow-hidden">
            <div className="bg-gradient-to-r from-blue-500 to-indigo-600 p-4">
              <div className="flex justify-between items-center">
                <h3 className="text-white font-semibold text-lg">
                  üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
                </h3>
                <div className="text-white text-sm">
                  ‡πÅ‡∏™‡∏î‡∏á {filteredAndSortedTeachers.length} ‡∏à‡∏≤‡∏Å {teachers.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                </div>
              </div>
            </div>

            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead className="bg-blue-50">
                  <tr>
                    <th className="py-3 px-4 text-left text-blue-800 font-semibold">Username</th>
                    <th className="py-3 px-4 text-left text-blue-800 font-semibold">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</th>
                    <th className="py-3 px-4 text-left text-blue-800 font-semibold">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                    <th className="py-3 px-4 text-left text-blue-800 font-semibold">‡∏Ñ‡∏ì‡∏∞</th>
                    <th className="py-3 px-4 text-left text-blue-800 font-semibold">Email</th>
                    <th className="py-3 px-4 text-left text-blue-800 font-semibold">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                    <th className="py-3 px-4 text-center text-blue-800 font-semibold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredAndSortedTeachers.map((teacher, index) => (
                    <tr
                      key={teacher.Username}
                      className={`border-b hover:bg-blue-25 transition-colors ${
                        index % 2 === 0 ? 'bg-white' : 'bg-blue-25'
                      }`}
                    >
                      <td className="py-3 px-4">
                        <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-lg text-xs font-mono font-semibold">
                          {teacher.Username}
                        </span>
                      </td>
                      <td className="py-3 px-4">
                        {teacher.Prefix ? (
                          <span className="bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full text-xs font-medium border border-indigo-200">
                            {teacher.Prefix}
                          </span>
                        ) : (
                          <span className="text-gray-400 text-xs">-</span>
                        )}
                      </td>
                      <td className="py-3 px-4 font-medium text-gray-800">
                        {teacher.F_name} {teacher.L_name}
                      </td>
                      <td className="py-3 px-4 text-gray-700">
                        {teacher.Faclty || <span className="text-gray-400 text-xs">-</span>}
                      </td>
                      <td className="py-3 px-4 text-blue-700">
                        {teacher.Email || <span className="text-gray-400 text-xs">-</span>}
                      </td>
                      <td className="py-3 px-4 text-gray-700">
                        {teacher.Phone || <span className="text-gray-400 text-xs">-</span>}
                      </td>
                      <td className="py-3 px-4 text-center">
                        <div className="flex gap-2 justify-center">
                          <button
                            onClick={() => handleEdit(teacher)}
                            className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-lg text-xs font-medium transition-all duration-200 transform hover:scale-105"
                            aria-label={`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${teacher.Username}`}
                          >
                            ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </button>
                          <button
                            onClick={() => handleDelete(teacher.Username)}
                            className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-lg text-xs font-medium transition-all duration-200 transform hover:scale-105"
                            aria-label={`‡∏•‡∏ö ${teacher.Username}`}
                          >
                            üóëÔ∏è ‡∏•‡∏ö
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                  {filteredAndSortedTeachers.length === 0 && (
                    <tr>
                      <td colSpan={7} className="py-12 text-center text-gray-500">
                        <div className="text-4xl mb-2">üìã</div>
                        <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå</p>
                        {(searchTerm || positionFilter) && (
                          <button 
                            onClick={() => {
                              setSearchTerm('');
                              setPositionFilter('');
                            }}
                            className="mt-2 text-blue-500 hover:text-blue-700 text-sm underline"
                          >
                            ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                          </button>
                        )}
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}