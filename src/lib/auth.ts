import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";

const JWT_SECRET = process.env.JWT_SECRET || "mysecret";

/* ===================== üîë JWT ===================== */

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
export function verifyToken(token: string) {
  try {
    return jwt.verify(token, JWT_SECRET) as {
      userId: string;
      email: string;
      role: string;
    };
  } catch (err) {
    throw new Error("Invalid token");
  }
}

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á token (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
export function signToken(payload: { userId: string; email: string; role: string }) {
  return jwt.sign(payload, JWT_SECRET, { expiresIn: "7d" }); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ token 7 ‡∏ß‡∏±‡∏ô
}

/* ===================== üîí Password ===================== */

// ‚úÖ Hash password ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö DB
export async function hashPassword(password: string): Promise<string> {
  const salt = await bcrypt.genSalt(10);
  return bcrypt.hash(password, salt);
}

// ‚úÖ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö password ‡∏ï‡∏≠‡∏ô login
export async function comparePassword(plainPassword: string, hashedPassword: string): Promise<boolean> {
  return bcrypt.compare(plainPassword, hashedPassword);
}
